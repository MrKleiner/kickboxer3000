







class simple_lizard_checkboxes
{
	// constructor(height, width) {
	constructor() {
		window.lizard_checkboxes = {};

		Element.prototype.lzbox=function() {
			if (this.closest('lzcbox') != null){
				for (var find in window.lizard_checkboxes){
					if (window.lizard_checkboxes[find]['elem'][0] == this){
						return {
							'name': find,
							'state': window.lzcbox.state(window.lizard_checkboxes[find]['elem']),
							set: function(towhich=''){
								remap_t.set_state(ensure, towhich)
			        		},
							toggle: function(){
								remap_t.set_state(ensure, null)
			        		}
						}
					}
				}
			}
		}


		print('Initialized Simple Checkboxes');
	};






	// ============================================================
	// ------------------------------------------------------------
	//                    		Spawner
	// ------------------------------------------------------------
	// ============================================================
	
	// all-in one function
	resync()
	{
		// spawn checkboxes
		for (var cb of document.querySelectorAll('lzcbox')){
			var mkbox = $(`
				<div cbtitle>${cb.innerText.trim()}</div>
				<div cmark_outer>
					<div cmark_inner></div>
				</div>
			`)

			// set asked state
			$(cb).attr('lzcbox_state', ($(cb).attr('lzcbox_init') == 'set') ? 'set' : 'unset')
			// remove init attr
			$(cb).removeAttr('lzcbox_init')
			// mark as done
			$(cb).attr('lzcbox_done', true)

			// set html of the checkbox
			$(cb).html(mkbox)

			// add to the registry
			window.lizard_checkboxes[$(cb).attr('lzcbox_id')] = {
				'elem': $(cb)
			}
		}

		// redundancy check
		for (var check in window.lizard_checkboxes){
			if (!document.body.contains(window.lizard_checkboxes[check]['elem'][0])){
				delete window.lizard_checkboxes[check]
			}
		}
	}



	get pool(){
		var ch_list = {};
		var remap_t = this;
		for (var ch in window.lizard_checkboxes){
			let ensure = ch
			ch_list[ch] = {
				'name': ensure,
				'state': remap_t.state(ensure),
				set: function(towhich=''){
					remap_t.set_state(ensure, towhich)
        		},
				toggle: function(){
					remap_t.set_state(ensure, null)
        		}
			}
		}
		return ch_list
	}


	state(cbox=null){
		if (cbox==null || cbox==undefined){return null}
		var map_state = {
			'set': true,
			'unset': false
		}
		return map_state[$(cbox).closest('lzcbox').attr('lzcbox_state')] || map_state[window.lizard_checkboxes[cbox]['elem'].attr('lzcbox_state')]
	}

	// null = toggle
	// jQuery is kinda giga sex: it's safe to pass undefined and null
	// takes element OR checkbox name as an input
	set_state(cbox=null, state=null){

		// priority:
		// 1 - passed value having closest element with a tag name lizcox. 
		// This is checked by trying to access the first element of the resulting jQuery object (generated by throwing the passed selector into jQuery init). 
		// It's undefined if passed selector is not a valid html element/css selector OR there's no <lzcbox> element up its parent tree.
		// 2 - if passed selector could be found as a key in the window.lizard_checkboxes storage, then try to access the element
		// If element is undefined - spit out some random rubbish
		// The result of this whole chain is fed into a jQuery object which means that null and undefined are not a problem, etc...
		var checkbox = $($(cbox).closest('lzcbox')[0] || (window.lizard_checkboxes[cbox] ? window.lizard_checkboxes[cbox]['elem'] : $(cbox)));

		if (state==null || state=='toggle'){
			if (checkbox.attr('lzcbox_state') == 'set'){checkbox.attr('lzcbox_state', 'unset')}
			else
			{checkbox.attr('lzcbox_state', 'set')}
			return
		}
		var set_dict = {
			false: 'unset',
			true: 'set'
		}
		set_dict[state] ? checkbox.attr('lzcbox_state', set_dict[state]) : null
	}



}
window.lzcbox = new simple_lizard_checkboxes();









