Electron Это грубо говоря страничка в браузере, которая имеет полный доступ к файловой системе.
Открывать случайные веб странички через это дело нельзя.
Их можно подгрузить кодом, но Electron на это не расчитан.

Для того, что бы запустить электрон нужно много чего установить,
но проще всего просто скачать Git Клиент "Fork".
В него всё встроено.

Дальше нужно склонировать репозиторий, зайти в Форк и справа вверху нажать на иконку консоли.
Откроется консоль в которой нужно поочерёдно вбить 2 команды:
> cd app
> npm run start

Для того, что бы перезагрузить скрипты нужно нажать ctrl + r внутри контролера.

Кикбоксер разбит на модули, где каждый модуль это отдельный контролер.
Есть также база с разными полезными функциями по типу стандартных кнопок,
класов для удобного управления титрами, а также получением проекта vmix
в виде XML.

Модули обрабатываются питоновским скриптом, который слегка упрощает работу.

Каждый модуль находится в подпапке в папке "modules".
Каждая из вышеупомянутых папок должна содержать 3 файла:
*.css
*.html
*.js

Где звёздочка это название родительской папки.




Каждый модуль имеет доступ к нескольким глобальным объектам:

ksys
vmix
app_root
Path


ksys (KickBoxer System) - Содержит набор утилит, которые мало относятся к Vmix.
vmix - Это набор утилит для работы с Vmix.
app_root - Это python Path-Like объект, который указывает на корневую папку контролера.
Path - Это (почти) клон модуля Pathlib из питона.



ksys.ticker - Набор утилит управления таймерами.
Для того, что бы создать таймер нужно вызвать функцию
ksys.ticker.spawn
Принимает всего 1 параметр, который является словарём параметров:

duration (int):      Продолжительность таймера в секундах.
infinite (boolean):  Должен ли таймер совершать суицид после окончания.    
offset (int):        Сдвиг в секундах. Таймер пропустит указанное количество секунд при инициализации.
wait (boolean):      Ждать ли пока функция callback выполнится передь тем как тикать дальше.
callback (function): Функция, которая будет вызываться при каждом импульсе.
reversed (boolean):  Должен ли таймер тикать в обратную сторону.

Пример:
$this.main_ticker = ksys.ticker.spawn({
	'duration': 90,
	'infinite': false,
	'reversed': true,
	'callback': $this.main_ticker_callback,
	'wait': true,
})

Теперь переменная модуля main_ticker содежит ссылку на класс таймера.





Для того, что бы создать стандартную конпку - нужно добавить тэг <vmixbtn>
Этот тег нужно добавить заранее в html, так как при нициализации модуля эти тэги
обрабатываются.

Пример:
<vmixbtn seq_info="vis_show" btname="player_onn" onclick="$this.player_onn(this)">Player ON</vmixbtn>



Управление титрами осуществляется при помощи специального класа.
В футболе они уже заранее созданы, к ним нужно просто обратиться:
Они проиндексированы в функции $this.index_titles в самом верху файла


$this.titles.имя

Включить титр на первом оверлее:
await $this.titles.имя.overlay_in(1)

Выключить:
await $this.titles.имя.overlay_out(1)

Поменять текстовое содержимое поля внутри титра:
await $this.titles.имя.set_text('имя поля', 'текст')

Сделать поле видимым:
await $this.titles.имя.toggle_text('имя поля', boolean | null)
True = Включить
False = Выключить
null = toggle

С картинками то же самое:
await $this.titles.имя.toggle_img('имя поля', boolean | null)

Поменять картинку:
await $this.titles.имя.set_img_src('имя поля', string | Path-Like)






В системе присутсвует система контекста и сохранения файлов в датабазы.
Управление контекстом:
ksys.context.module.cache - Кэш параметров котнекста, read-only.

Обновить параметр:
ksys.context.module.prm('название', значение, boolean)

Поскольку контекст хранится в физическом файле на диске -
При каждом обновлении параметров он должен пересохраняться, однако
иногда есть надобность обновить сразу несколько параметров и сохранить файл в конце.
Для того, что бы файл не перезаписывался нужно boolean поставить на False.
По умолчанию файл перезапиывается.


